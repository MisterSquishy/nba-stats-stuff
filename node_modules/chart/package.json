{
  "_args": [
    [
      "chart",
      "/home/peter/Dropbox/projects/Fantasy/nbaapp"
    ]
  ],
  "_from": "chart@latest",
  "_id": "chart@0.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/chart",
  "_npmUser": {
    "email": "rook2pawn@gmail.com",
    "name": "rook2pawn"
  },
  "_npmVersion": "1.1.71",
  "_phantomChildren": {},
  "_requested": {
    "name": "chart",
    "raw": "chart",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/chart/-/chart-0.1.2.tgz",
  "_shasum": "69d9e916c26a8bed85b29df802c763ab5297d318",
  "_shrinkwrap": null,
  "_spec": "chart",
  "_where": "/home/peter/Dropbox/projects/Fantasy/nbaapp",
  "author": {
    "email": "rook2pawn@gmail.com",
    "name": "David Wee",
    "url": "http://rook2pawn.com"
  },
  "bugs": {
    "url": "https://github.com/rook2pawn/node-chart/issues"
  },
  "dependencies": {
    "hashish": "",
    "hat": "",
    "mrcolor": "https://github.com/rook2pawn/mrcolor/archive/master.tar.gz"
  },
  "description": "event based time series charting API",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "69d9e916c26a8bed85b29df802c763ab5297d318",
    "tarball": "https://registry.npmjs.org/chart/-/chart-0.1.2.tgz"
  },
  "homepage": "https://github.com/rook2pawn/node-chart",
  "keywords": [
    "canvas",
    "chart",
    "time series"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "rook2pawn",
      "email": "rook2pawn@gmail.com"
    }
  ],
  "name": "chart",
  "optionalDependencies": {},
  "readme": "node-chart\n==========\n\nTime Series Charting Canvas API \n\n[Example](http://rook2pawn.com)\n\nUse\n===\n\n    var Chart = require('chart');\n    var chart = new Chart;\n    var ee = require('events').EventEmitter;\n    var datasource = new ee;\n\n    chart.series(datasource);\n    chart.to(document.getElementById('mychart'));\n\n    setInterval(function() {\n        var random = Math.floor(Math.random()*100);\n        datasource.emit('data',{y:random});\n    },1000);\n\nMultiple Data sources\n=====================\n\n    var d1 = new ee;\n    var d2 = new ee;\n\n    chart.series(d1);\n    chart.series(d2);\n    \n    // or\n    chart.series([d1,d2])\n        \n    // or\n    chart.series(d1,d2);\n\nMultiple Y-Axises\n=================\n\nTo have the data you emit treated as separate y-axises with different scaling, simply\npass a second object {multiple:true} in your emit\n\n    datasource.emit('data',{stockPrice:235,temperature:88},{multiple:true});\n\n\nchart.series\n============\n\nEvent types that chart.series responds to are \n\n'data' - provides data for timeseries and optional labels\n\n'stop' - stops the timeseries for that datastream\n\nchart.legend\n============\n\n    <div id='legend'></div>\n    chart.legend(document.getElementById('legend'));\n\nLegend is automatically created with the data that is sent. \nTo visualize and interact with a legend, use the .legend callback\n\n\nlegend.css\n==========\n\n    <link type='text/css' rel='stylesheet' href='legend.css' />\n\nAlso in the root directory of this package is a file called legend.css that you should include.\n\n\nLabels go with the value\n------------------------\n\n    datasorce.emit('data',{'units sold':9.2})\n\nYou can supply multiple labels\n------------------------------\n\n    datasorce1.emit('data',{'units sold':9.2})\n    datasorce2.emit('data',{'current energy consumption':30})\n\nColors\n======\n\nYou can set the following colors. Defaults to below.\n\n    chart.color.bg = '#FFF'; // the background color\n    chart.color.grid = '#c9d6de'; // a pleasant grid\n    chart.color.xlabel = '#000'; // the color of the x-axis labels\n    chart.color.xline = '#000'; // the color the x-axis line\n    chart.color.ylabel = '#000'\n    chart.color.yline = '#000';\n    chart.color.interactionline = '#000';\n\nYou can also create a preferred ordered set of colors for the lines.\nYou must supply the lines in six digit RGB hexadecimal like so:\n\n    chart.color.line = ['#FF0000','#00FF'];\n\nAny colors you do not supply will be provided for.\n\n    chart.color.line = ['#FF0000',undefined,'#00FF'];\n    // will choose '#FFFF00' for the second element automatically.\n\nYou can also set colors for the legend, through these CSS classes\n\n    div.legend {\n    }\n    div.legend div.axisname {\n    }\n\nRender Modes\n============\n\nYou can set the render modes any time, change them at any time like so:\n\n    chart.rendermode = \"line\"; // defaults to line, also can use \"linefill\", \"bar\"\n\nYou can also set the rendermode from a specific event and it will take precedence.\nYou can switch this at will.\n\n    datasource.rendermode = \"linefill\";\n\nMISC\n====\n\nchart.inspect\n=============\n\nchart.inspect() returns the current data passing through.\n\n\nTests\n=====\n\n    // to install tap, simply npm install tap\n    \n    tap ./test\n\n\nMISC\n====\n\nAuthor: David Wee <rook2pawn@gmail.com>\nLicense: MIT/X11\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rook2pawn/node-chart.git"
  },
  "version": "0.1.2"
}
